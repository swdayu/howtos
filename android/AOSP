The Android Source Code
=======================

https://source.android.com/setup/
https://developers.google.com/android/drivers
https://developers.google.com/android/images
https://developers.google.com/android/ota

Code name 	Version 	API level
Oreo 	8.1.0 	API level 27
Oreo 	8.0.0 	API level 26

Build 	Branch 	Version 	Supported devices
OPM4.171019.016.B1 	android-8.1.0_r28 	Oreo 	Pixel XL, Pixel, Pixel 2 XL, Pixel 2
OPM4.171019.016.A1 	android-8.1.0_r27 	Oreo 	Nexus 5X
OPM2.171019.029.B1 	android-8.1.0_r26 	Oreo 	Pixel 2 XL, Pixel 2
OPM4.171019.015.A1 	android-8.1.0_r23 	Oreo 	Pixel 2 XL, Pixel 2
OPM5.171019.017 	android-8.1.0_r18 	Oreo 	Nexus 5X, Nexus 6P
OPM3.171019.016 	android-8.1.0_r17 	Oreo 	Nexus 5X, Nexus 6P
OPM5.171019.015 	android-8.1.0_r14 	Oreo 	Nexus 5X, Nexus 6P
OPM3.171019.014 	android-8.1.0_r13 	Oreo 	Nexus 5X, Nexus 6P
OPM5.171019.014 	android-8.1.0_r9 	Oreo 	Nexus 5X, Nexus 6P
OPM3.171019.013 	android-8.1.0_r7 	Oreo 	Nexus 5X, Nexus 6P

Booting into fastboot mode
Pixel XL 	marlin 	Press and hold Volume Down, then press and hold Power.
Pixel 	sailfish 	Press and hold Volume Down, then press and hold Power.
Nexus 5X 	bullhead 	Press and hold Volume Down, then press and hold Power.

Kernel location of the sources and binaries:
Device 	Binary location 	Source location 	Build configuration
marlin 	device/google/marlin-kernel 	kernel/msm 	marlin_defconfig
sailfish 	device/google/marlin-kernel 	kernel/msm 	marlin_defconfig
bullhead 	device/lge/bullhead-kernel 	kernel/msm 	bullhead_defconfig

Device 	Code name 	Build configuration
Pixel XL 	marlin 	aosp_marlin-userdebug
Pixel 	sailfish 	aosp_sailfish-userdebug
Nexus 5X 	bullhead 	aosp_bullhead-userdebug


Downloading the Source 
----------------------

curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
chmod a+x ~/bin/repo
cd path/to/your/working_directory
git config --global user.name "Your Name"
git config --global user.email "you@example.com"
repo init -u https://android.googlesource.com/platform/manifest -b android-8.1.0_r27
repo sync

It might be necessary to explicitly specify the proxy that is then used by Repo:
export HTTP_PROXY=http://<proxy_user_id>:<proxy_password>@<proxy_server>:<proxy_port>
export HTTPS_PROXY=http://<proxy_user_id>:<proxy_password>@<proxy_server>:<proxy_port>


Download proprietary binaries
-----------------------------

You can download official binaries for the supported devices running tagged AOSP release branches
from Google's drivers (https://developers.google.com/android/drivers).

Nexus 5X binaries for Android 8.1.0 (OPM4.171019.016.A1)
Hardware Component 	Company 	Download 	SHA-256 Checksum
Vendor image 	LG 	Link[1] 	6813c8a033bc575e6aeadbb8c244117100ff7b0047200d7fe9982ea7731951fb
GPS, Audio,   Qualcomm 	Link[2] 	50afbc78aaf32c66cbc7248132595378228771c7634c7cefc046861fcc878e05
Camera, Gestures,
Graphics, DRM,
Video, Sensors

Pixel 2 binaries for Android 8.1.0 (OPM4.171019.016.B1)
Hardware Component 	Company 	Download 	SHA-256 Checksum
Vendor image 	Google 	Link[3] 	b2df85e7f18f60beaa2de7b726e77e0e80ce1c9e31c08e23fa7347b7627bac51
GPS, Audio,   Qualcomm 	Link[4] 	2505a61aab7ab19fa80c81ead1ed8701aac38af593c385065cfdc43edcde138b
Camera, Gestures,
Graphics, DRM,
Video, Sensors

[1] https://dl.google.com/dl/android/aosp/lge-bullhead-opm4.171019.016.a1-6ca0caeb.tgz
[2] https://dl.google.com/dl/android/aosp/qcom-bullhead-opm4.171019.016.a1-adcef468.tgz
[3] https://dl.google.com/dl/android/aosp/google_devices-walleye-opm4.171019.016.b1-64afcde5.tgz
[4] https://dl.google.com/dl/android/aosp/qcom-walleye-opm4.171019.016.b1-570426c5.tgz

Each set of binaries comes as a self-extracting script in a compressed archive. Uncompress each
archive, run the included self-extracting script from the root of the source tree, then confirm
you agree the terms of the enclosed license agreement. The binaries and their matching makefiles
will be installed in the vendor/ hierarchy of the source tree.

To ensure the newly installed binaries are properly taken into account after being extracted,
delete the existing output of any previous build using:
make clobber


Build the cod and Run
---------------------

. build/envsetup.sh  # set up environment
lunch                # choose a target (device/lge/bullhead/vendorsetup.sh)
Which would you like? [aosp_arm-eng] aosp_bullhead-userdebug
make -j4             # build the code
make fastboot adb    # build fastboot and adb if you need them first

adb reboot bootloader
fastboot flashing unlock  # fastboot oem unlock (2014 and earlier devices)
fastboot flashall -w      # -w option wipes the /data can be used for the first time
fastboot flashing lock    # fastboot oem lock (2014 and eariler devices)

ADB
---
make adb
LA.UM.7.6/LINUX/android/out/host/linux-x86/bin/adb
adb shell dumpsys activity service aptxalsService

Check notification settings for application: 
* Go to Settings > Apps & notifications > App info 
* Tap three dots and select 'Show system' 
* Select 'com.qualcomm.qtil.aptxals...' 
* Go to Notifications > aptxals > Behavior


